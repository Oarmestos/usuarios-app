---
import Layout from '../layouts/Layout.astro';

// Cargar datos iniciales (página 1)
let data = { data: [], page: 1, total_pages: 1 };
let error = null;

try {
  const response = await fetch('https://reqres.in/api/users?page=1', {
    headers: {
      'x-api-key': 'reqres-free-v1'
    }
  });
  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }
  const apiData = await response.json();
  if (apiData && apiData.data && Array.isArray(apiData.data)) {
    data = apiData;
  } else {
    throw new Error('Invalid API response structure');
  }
} catch (e) {
  console.error('Error fetching users:', e);
  error = e.message;
}
---

<Layout title="Usuarios App">
	<main class="container">
		<header class="header">
			<h1>Usuarios</h1>
			<p>Gestión de usuarios con API pública</p>
			{!error && data.data && data.data.length > 0 && (
				<div class="page-info">
					<span>Mostrando usuarios {((data.page - 1) * 6) + 1} - {Math.min(data.page * 6, data.total)} de {data.total} usuarios totales</span>
				</div>
			)}
		</header>

		{error ? (
			<div class="error-message">
				<h3>Error al cargar usuarios</h3>
				<p>No se pudieron cargar los usuarios. Por favor, intenta nuevamente.</p>
				<p class="error-detail">{error}</p>
				<a href="/" class="retry-btn">Reintentar</a>
			</div>
		) : (
			<>
				<div class="users-grid" id="users-grid">
					{data.data && data.data.length > 0 ? data.data.map((user) => (
						<div class="user-card" data-user-id={user.id}>
							<div class="user-avatar">
								<img src={user.avatar} alt={`${user.first_name} ${user.last_name}`} />
							</div>
							<div class="user-info">
								<h3>{user.first_name} {user.last_name}</h3>
								<p>{user.email}</p>
							</div>
							<button class="view-details-btn" data-user={JSON.stringify(user)}>Ver Detalles</button>
						</div>
					)) : (
						<div class="no-users">
							<p>No se encontraron usuarios.</p>
						</div>
					)}
				</div>

				<div class="pagination">
					<button id="prev-btn" class="pagination-btn prev" style="display: none;">← Anterior</button>
					
					<span class="pagination-info" id="pagination-info">
						Página <span id="current-page">{data.page}</span> de <span id="total-pages">{data.total_pages}</span>
					</span>
					
					<button id="next-btn" class="pagination-btn next">Siguiente →</button>
				</div>
			</>
		)}

	</main>

	<!-- Modal para detalles del usuario -->
	<div id="user-modal" class="modal">
		<div class="modal-content">
			<span class="close">&times;</span>
			<div id="modal-body"></div>
		</div>
	</div>

	<script>
		// Detectar página inicial desde la URL
		const urlParams = new URLSearchParams(window.location.search);
		let currentPage = parseInt(urlParams.get('page')) || 1;
		let totalPages = 2;

		async function loadUsers(page) {
			try {
				const response = await fetch(`https://reqres.in/api/users?page=${page}`, {
					headers: {
						'x-api-key': 'reqres-free-v1'
					}
				});
				if (!response.ok) {
					throw new Error(`HTTP error! status: ${response.status}`);
				}
				const data = await response.json();
				
				// Actualizar el grid de usuarios
				const usersGrid = document.getElementById('users-grid');
				usersGrid.innerHTML = '';
				
				data.data.forEach(user => {
					const userCard = document.createElement('div');
					userCard.className = 'user-card';
					userCard.setAttribute('data-user-id', user.id);
					userCard.innerHTML = `
						<div class="user-avatar">
							<img src="${user.avatar}" alt="${user.first_name} ${user.last_name}" />
						</div>
						<div class="user-info">
							<h3>${user.first_name} ${user.last_name}</h3>
							<p>${user.email}</p>
						</div>
						<button class="view-details-btn" data-user='${JSON.stringify(user)}'>Ver Detalles</button>
					`;
					usersGrid.appendChild(userCard);
				});
				
				// Actualizar información de paginación
				currentPage = data.page;
				totalPages = data.total_pages;
				
				// Actualizar URL del navegador
				const newUrl = currentPage === 1 ? window.location.pathname : `${window.location.pathname}?page=${currentPage}`;
				window.history.pushState({page: currentPage}, '', newUrl);
				
				document.getElementById('current-page').textContent = currentPage;
				document.getElementById('total-pages').textContent = totalPages;
				
				// Actualizar información de rango de usuarios
				const pageInfo = document.querySelector('.page-info span');
				if (pageInfo) {
					const startUser = ((currentPage - 1) * 6) + 1;
					const endUser = Math.min(currentPage * 6, data.total);
					pageInfo.textContent = `Mostrando usuarios ${startUser} - ${endUser} de ${data.total} usuarios totales`;
				}
				
				// Actualizar visibilidad de botones
				const prevBtn = document.getElementById('prev-btn');
				const nextBtn = document.getElementById('next-btn');
				
				prevBtn.style.display = currentPage > 1 ? 'inline-block' : 'none';
				nextBtn.style.display = currentPage < totalPages ? 'inline-block' : 'none';
				
				// Reactivar event listeners para los nuevos botones
				attachModalListeners();
				
			} catch (error) {
				console.error('Error loading users:', error);
			}
		}

		// Event listeners para paginación
		document.getElementById('prev-btn').addEventListener('click', () => {
			if (currentPage > 1) {
				loadUsers(currentPage - 1);
			}
		});

		document.getElementById('next-btn').addEventListener('click', () => {
			if (currentPage < totalPages) {
				loadUsers(currentPage + 1);
			}
		});

		// Función para reactivar los event listeners del modal
		function attachModalListeners() {
			const viewDetailsBtns = document.querySelectorAll('.view-details-btn');
			viewDetailsBtns.forEach(btn => {
				btn.addEventListener('click', function() {
					const userData = JSON.parse(this.getAttribute('data-user'));
					const modal = document.getElementById('user-modal');
					const modalBody = document.getElementById('modal-body');
					
					modalBody.innerHTML = `
						<div class="user-detail">
							<div class="user-detail-avatar">
								<img src="${userData.avatar}" alt="${userData.first_name} ${userData.last_name}" />
							</div>
							<div class="user-detail-info">
								<h2>${userData.first_name} ${userData.last_name}</h2>
								<div class="detail-item">
									<span class="label">Email:</span>
									<span class="value">${userData.email}</span>
								</div>
								<div class="detail-item">
									<span class="label">ID:</span>
									<span class="value">${userData.id}</span>
								</div>
							</div>
						</div>
					`;
					
					modal.style.display = 'block';
				});
			});
		}

		// Cargar página inicial si viene de URL con parámetros
		if (currentPage > 1) {
			loadUsers(currentPage);
		}

		// Manejar navegación del navegador (botones atrás/adelante)
		window.addEventListener('popstate', function(event) {
			const urlParams = new URLSearchParams(window.location.search);
			const pageFromUrl = parseInt(urlParams.get('page')) || 1;
			if (pageFromUrl !== currentPage) {
				loadUsers(pageFromUrl);
			}
		});

		// Activar listeners iniciales
		attachModalListeners();

		// Event listeners para cerrar el modal
		const modal = document.getElementById('user-modal');
		const closeBtn = document.querySelector('.close');

		// Cerrar modal al hacer clic en la X
		closeBtn.addEventListener('click', function() {
			modal.style.display = 'none';
		});

		// Cerrar modal al hacer clic fuera del contenido
		window.addEventListener('click', function(event) {
			if (event.target === modal) {
				modal.style.display = 'none';
			}
		});
	</script>
</Layout>
